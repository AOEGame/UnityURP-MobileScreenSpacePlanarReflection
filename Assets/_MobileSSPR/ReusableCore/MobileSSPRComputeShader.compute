//simplified mobile implementation of "Screen Space Planar Reflections in Ghost Recon Wildlands" in Unity URP
//http://remi-genin.fr/blog/screen-space-plane-indexed-reflection-in-ghost-recon-wildlands/

//*we don't sample fallback reflection probe here, we sample it at user's shader (e.g. water plane shader)
//because Lighting data provided by URP (e.g. reflection probe) is only correct when rendering using normal drawing method, but not compute shader

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

//common input from MobileSSPRRendererFeature
RWTexture2D<half4> ColorRT;
RWTexture2D<float> PosWSyRT;
float2 _RTSize;
//common sample settings
SamplerState PointClampSampler;
SamplerState LinearClampSampler;

////////////////////////////////////////////////////////////////////////////////////////////////////
// kernel 0
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma kernel RenderSSPRRT

Texture2D<half4> _CameraOpaqueTexture;
Texture2D<float> _CameraDepthTexture;
float _HorizontalPlaneHeightWS;
float _FadeOutScreenBorderWidth; //compute shader can't declare half type float input

//for fadeout SSPR at screen boarder, input is screenUV
//https://www.iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm
half sdBox(half2 p, half2 b)
{
    half2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}

//numthreads x*y*z must = 1024 for maximum performance in SM5
//https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-attributes-numthreads
[numthreads(32,32,1)]
void RenderSSPRRT (uint3 id : SV_DispatchThreadID)
{
    ColorRT[uint2(id.xy)] = half4(0,0,0,0);//black rgb and alpha = 0. alpha 0 means reflection plane will not use SSRP's result, if no valid SSPR pixels found    
    PosWSyRT[uint2(id.xy)] = 99999;//a very high posWS.y as clear value

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//prepare data
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float2 screenUV = float2(id.x/(_RTSize.x-1),id.y/(_RTSize.y-1)); //[0,RTSize-1] -> [0,1] uv
	float inputPixelRawDepth = _CameraDepthTexture.SampleLevel(PointClampSampler, screenUV, 0);//rawDepth(posCS.z) in _CameraDepthTexture

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//convert screenUV & _CameraDepthTexture's rawDepth(posCS.z) to posWS
	//https://github.com/Steven-Cannavan/URP_ScreenSpacePlanarReflections/blob/master/Assets/Shaders/ReflectionShader.compute#L75
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float4 posCS = float4(screenUV * 2.0 - 1.0, inputPixelRawDepth, 1.0); //reconstruct posCS using screen uv & rawDepth
	float4 posHWS = mul(UNITY_MATRIX_I_VP, posCS); //posCS -> posHWS
	float3 posWS = posHWS.xyz / posHWS.w; //posHWS -> posWS

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//if posWS is already under reflection plane (e.g. under water plane), 
	//it will never be a correct color to reflect anyway, early exit to prevent wrong result in Color RT
	////////////////////////////////////////////////////////////////////////////////////////////////////
	if(posWS.y <= _HorizontalPlaneHeightWS)
		return;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//reflect posWS according to horizontal reflection plane (e.g. water plane)
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float3 reflectedPosWS = posWS;
	reflectedPosWS.y -= _HorizontalPlaneHeightWS;
	reflectedPosWS.y *= -1;//actual reflect action
	reflectedPosWS.y += _HorizontalPlaneHeightWS;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//find reflected posWS's new screenUV
	//https://github.com/Steven-Cannavan/URP_ScreenSpacePlanarReflections/blob/master/Assets/Shaders/ReflectionShader.compute#L87
	////////////////////////////////////////////////////////////////////////////////////////////////////
	float4 reflectedPosCS = mul(UNITY_MATRIX_VP,float4(reflectedPosWS,1));//posWS -> posCS
	float2 reflectedPosNDCxy = reflectedPosCS.xy / reflectedPosCS.w;//posCS -> posNDC

	float2 reflectedScreenUV = reflectedPosNDCxy * 0.5 + 0.5; //posNDC -> screen uv

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//write ColorRT[reflectedScreenUV] = inputPixelOpaqueColor in rgb, usage in a
	//write PosWSyRT[reflectedScreenUV] = inputPixelPosWS.y
	//ref: https://github.com/Steven-Cannavan/URP_ScreenSpacePlanarReflections/blob/master/Assets/Shaders/ReflectionShader.compute#L95
	////////////////////////////////////////////////////////////////////////////////////////////////////
#if UNITY_UV_STARTS_AT_TOP
	reflectedScreenUV.y = 1.0 - reflectedScreenUV.y;
#endif
	uint2 reflectedScreenID = reflectedScreenUV * _RTSize;//from screen uv[0,1] to [0,RTSize]
	
	//because writes to ColorRT RT are in an unknown random order(there can be >1 candidates writing to the same slot in the same dispatch call!),
	//here we only allow "closer to horizontal reflection plane's candidate" to write to ColorRT & PosWSyRT.
	//At the end, only the "closest to horizontal reflection plane candidate" will remain in ColorRT & PosWSyRT., which is the correct reflection data
	if(posWS.y < PosWSyRT[reflectedScreenID])
	{
		half3 inputPixelSceneColor = _CameraOpaqueTexture.SampleLevel(LinearClampSampler, screenUV, 0).rgb;

		//smooth fadeout if pixel is near "outside valid color data" area
		half d = abs(sdBox(screenUV*2-1, half2(1,1)));
		half fadeoutAlpha = smoothstep(0, _FadeOutScreenBorderWidth,d);

		//we write the following data to 2 RTs:
		//-ColorRT.rgba = current best reflection color and alpha(alpha means SSPR usage %)
		//-PosWSyRT.r = current lowest PosyWS (concept similar to a regular depth buffer)
		ColorRT[reflectedScreenID] = half4(inputPixelSceneColor,fadeoutAlpha);
		PosWSyRT[reflectedScreenID] = posWS.y;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
// kernel 1
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma kernel FillMissingColorInfo

//numthreads x*y*z must = 1024 for maximum performance in SM5
//https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sm5-attributes-numthreads
[numthreads(32, 32, 1)]
void FillMissingColorInfo(uint3 id : SV_DispatchThreadID)
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//fix all "holes" caused by missing screen space data
	//ref: [Filling the gaps] from http://remi-genin.fr/blog/screen-space-plane-indexed-reflection-in-ghost-recon-wildlands/
	////////////////////////////////////////////////////////////////////////////////////////////////////

		//fix "behind front object occluded missing pixels"
		//see -> Low Complexity, High Fidelity: The Rendering of INSIDE https://youtu.be/RdN06E6Xn9E?t=2385
		//TODO:...

	//temp code
	if(PosWSyRT[id.xy] > 9000)
		ColorRT[id.xy] = half4(1,0,0,1);
}